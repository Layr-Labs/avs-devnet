# yaml-language-server: $schema=../schema.json

# Local devnet config file for the hello-world-avs example
# This file can be used inside the hello-world-avs repo to start
# a devnet with any local changes
# TODO: move this to the hello-world-avs repo

# To run this example:
# 0. Ensure you have the latest version of the devnet (see the README for how to install)
# 1. Clone the https://github.com/Layr-Labs/hello-world-avs repo
# 2. Copy this file inside that repo (on the root)
# 3. While inside that repo, run `avs-devnet start hello_world_local.yaml`

deployments:
  - name: EigenLayer
    repo: "."
    contracts_path: "contracts"
    script: script/DeployEigenLayerCore.s.sol:DeployEigenLayerCore
    env:
      # NOTE: this is used inside the deployer script
      PRIVATE_KEY: "{{.keys.deployer_key.private_key}}"
      # NOTE: these are needed because of repo's `foundry.toml`
      HOLESKY_PRIVATE_KEY: ""
      HOLESKY_RPC_URL: ""
      ETHERSCAN_API_KEY: ""
    input:
      config/core/: eigenlayer-config
    output:
      eigenlayer_addresses: "deployments/core/31337.json"

  - name: hello-world-avs
    repo: "."
    contracts_path: "contracts"
    script: script/HelloWorldDeployer.s.sol:HelloWorldDeployer
    env:
      # NOTE: this is used inside the deployer script
      PRIVATE_KEY: "{{.deployer_private_key}}"
      # NOTE: these are needed because of repo's `foundry.toml`
      HOLESKY_PRIVATE_KEY: ""
      HOLESKY_RPC_URL: ""
      ETHERSCAN_API_KEY: ""
    input:
      config/hello-world/: hello-world-config
      deployments/core/: eigenlayer_addresses
    output:
      avs_addresses: "deployments/hello-world/31337.json"

services:
  - name: operator
    image: hello_world
    build_context: "."
    input:
      /app/contracts/deployments/core/: eigenlayer_addresses
      /app/contracts/deployments/hello-world/: avs_addresses
    env:
      # This expands to the RPC node's URL
      RPC_URL: "{{.http_rpc_url}}"
      PRIVATE_KEY: "{{.keys.operator_ecdsa_keys.private_key}}"
    cmd: ["npm", "run", "start:operator"]

  - name: traffic-generator
    image: hello_world
    build_context: "."
    input:
      /app/contracts/deployments/core/: eigenlayer_addresses
      /app/contracts/deployments/hello-world/: avs_addresses
    env:
      # This expands to the RPC node's URL
      RPC_URL: "{{.http_rpc_url}}"
      PRIVATE_KEY: "{{.keys.traffic_generator_ecdsa_keys.private_key}}"
    cmd: ["npm", "run", "start:traffic"]

keys:
  - name: operator_ecdsa_keys
    type: ecdsa
  - name: traffic_generator_ecdsa_keys
    type: ecdsa
  - name: deployer_key
    type: "ecdsa"
    address: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
    private_key: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

artifacts:
  eigenlayer-config:
    files:
      31337.json:
        static_file: "contracts/config/core/31337.json"
  hello-world-config:
    files:
      31337.json:
        static_file: "contracts/config/hello-world/31337.json"

ethereum_package:
  network_params:
    # We use the chain ID hardcoded in the hello-world-avs example
    network_id: "31337"
    seconds_per_slot: 3
