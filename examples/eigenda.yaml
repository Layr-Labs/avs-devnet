# yaml-language-server: $schema=../schema.json

# Example devnet config file for the EigenDA AVS (https://github.com/Layr-Labs/eigenda)
# This file can be used inside the EigenDA repo to start a devnet with any local changes
# TODO: move this to the EigenDA repo
# TODO: update to work with latest version
# TODO: update to work with v2

# To run this example:
# 0. Ensure you have the latest version of the devnet (see the README for how to install)
# 1. Clone the https://github.com/Layr-Labs/eigenda repo (and checkout commit a294978e346fe9d7ede0f1a57012c36f64f1212a)
# 2. Copy this file inside that repo as `devnet.yaml` (on the root), and move inside it
# 3. Download the SRS files by running:
#    mkdir -p resources
#    curl --range 0-2097151 -L https://srs-mainnet.s3.amazonaws.com/kzg/g1.point -o resources/g1.point
#    curl --range 0-4194303 -L https://srs-mainnet.s3.amazonaws.com/kzg/g2.point -o resources/g2.point
#    curl -L https://srs-mainnet.s3.amazonaws.com/kzg/g2.point.powerOf2 -o resources/g2.point.powerOf2
# 4. Run `devnet start`

deployments:
  # NOTE: this script also deploys EigenLayer contracts
  - name: EigenDA
    repo: "."
    contracts_path: contracts
    script: script/SetUpEigenDA.s.sol:SetupEigenDA
    input:
      script/input/: eigenda_deploy_config
    output:
      eigenda_addresses: script/output/eigenda_deploy_output.json
    addresses:
      serviceManager: "eigenda_addresses:.eigenDAServiceManager"
      operatorStateRetriever: "eigenda_addresses:.operatorStateRetriever"

  - name: MockRollup
    repo: "."
    contracts_path: contracts
    script: script/MockRollupDeployer.s.sol:MockRollupDeployer
    extra_args: "--sig 'run(address)' -- $EIGENDA_SERVICE_MANAGER"
    env:
      EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"

services:
  - name: node1
    image: eigenda-node
    build_cmd: "docker build . -t eigenda-node --target node"
    ports:
      dispersal:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      retrieval:
        number: 8081
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      nodeapi:
        number: 9091
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    input:
      /kzg/: kzg_config
      /keys/ecdsa: node1_ecdsa
      /keys/bls: node1_bls
    env:
      NODE_LOG_LEVEL: debug
      NODE_VERBOSE: true
      NODE_HOSTNAME: node1
      NODE_DISPERSAL_PORT: 8080
      NODE_RETRIEVAL_PORT: 8081
      NODE_ENABLE_METRICS: true
      NODE_METRICS_PORT: 9100
      NODE_ENABLE_NODE_API: true
      NODE_API_PORT: 9091
      NODE_TIMEOUT: "20s"
      NODE_QUORUM_ID_LIST: "0,1"
      NODE_DB_PATH: "/var/nodedb"
      NODE_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      NODE_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      NODE_PUBLIC_IP_PROVIDER: mockip
      NODE_CHURNER_URL: "{{.services.churner.ip_address}}"
      NODE_G1_PATH: /kzg/g1.point
      NODE_G2_PATH: /kzg/g2.point
      NODE_CACHE_PATH: /kzg/cache
      NODE_SRS_ORDER: 65536
      NODE_SRS_LOAD: 65536
      NODE_CHAIN_RPC: "{{.http_rpc_url}}"
      NODE_PRIVATE_KEY: "{{slice .keys.node1_ecdsa.private_key 2}}"
      NODE_ECDSA_KEY_FILE: /keys/ecdsa/keys/1.ecdsa.key.json
      NODE_ECDSA_KEY_PASSWORD: "{{.keys.node1_ecdsa.password}}"
      NODE_BLS_KEY_FILE: /keys/bls/keys/1.bls.key.json
      NODE_BLS_KEY_PASSWORD: "{{.keys.node1_bls.password}}"
      NODE_REGISTER_AT_NODE_START: true
      NODE_PUBLIC_IP_CHECK_INTERVAL: 0

  - name: node2
    image: eigenda-node
    build_cmd: "docker build . -t eigenda-node --target node"
    ports:
      dispersal:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      retrieval:
        number: 8081
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      nodeapi:
        number: 9091
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    input:
      /kzg/: kzg_config
      /keys/ecdsa: node2_ecdsa
      /keys/bls: node2_bls
    env:
      NODE_LOG_LEVEL: debug
      NODE_VERBOSE: true
      NODE_HOSTNAME: node2
      NODE_DISPERSAL_PORT: 8080
      NODE_RETRIEVAL_PORT: 8081
      NODE_ENABLE_METRICS: true
      NODE_METRICS_PORT: 9100
      NODE_ENABLE_NODE_API: true
      NODE_API_PORT: 9091
      NODE_TIMEOUT: "20s"
      NODE_QUORUM_ID_LIST: "0,1"
      NODE_DB_PATH: "/var/nodedb"
      NODE_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      NODE_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      NODE_PUBLIC_IP_PROVIDER: mockip
      NODE_CHURNER_URL: "{{.services.churner.ip_address}}"
      NODE_G1_PATH: /kzg/g1.point
      NODE_G2_PATH: /kzg/g2.point
      NODE_CACHE_PATH: /kzg/cache
      NODE_SRS_ORDER: 65536
      NODE_SRS_LOAD: 65536
      NODE_CHAIN_RPC: "{{.http_rpc_url}}"
      NODE_PRIVATE_KEY: "{{slice .keys.node2_ecdsa.private_key 2}}"
      NODE_ECDSA_KEY_FILE: /keys/ecdsa/keys/1.ecdsa.key.json
      NODE_ECDSA_KEY_PASSWORD: "{{.keys.node2_ecdsa.password}}"
      NODE_BLS_KEY_FILE: /keys/bls/keys/1.bls.key.json
      NODE_BLS_KEY_PASSWORD: "{{.keys.node2_bls.password}}"
      NODE_REGISTER_AT_NODE_START: true
      NODE_PUBLIC_IP_CHECK_INTERVAL: 0

  - name: node3
    image: eigenda-node
    build_cmd: "docker build . -t eigenda-node --target node"
    ports:
      dispersal:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      retrieval:
        number: 8081
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      nodeapi:
        number: 9091
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    input:
      /kzg/: kzg_config
      /keys/ecdsa: node3_ecdsa
      /keys/bls: node3_bls
    env:
      NODE_LOG_LEVEL: debug
      NODE_VERBOSE: true
      NODE_HOSTNAME: node3
      NODE_DISPERSAL_PORT: 8080
      NODE_RETRIEVAL_PORT: 8081
      NODE_ENABLE_METRICS: true
      NODE_METRICS_PORT: 9100
      NODE_ENABLE_NODE_API: true
      NODE_API_PORT: 9091
      NODE_TIMEOUT: "20s"
      NODE_QUORUM_ID_LIST: "0,1"
      NODE_DB_PATH: "/var/nodedb"
      NODE_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      NODE_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      NODE_PUBLIC_IP_PROVIDER: mockip
      NODE_CHURNER_URL: "{{.services.churner.ip_address}}"
      NODE_G1_PATH: /kzg/g1.point
      NODE_G2_PATH: /kzg/g2.point
      NODE_CACHE_PATH: /kzg/cache
      NODE_SRS_ORDER: 65536
      NODE_SRS_LOAD: 65536
      NODE_CHAIN_RPC: "{{.http_rpc_url}}"
      NODE_PRIVATE_KEY: "{{slice .keys.node3_ecdsa.private_key 2}}"
      NODE_ECDSA_KEY_FILE: /keys/ecdsa/keys/1.ecdsa.key.json
      NODE_ECDSA_KEY_PASSWORD: "{{.keys.node3_ecdsa.password}}"
      NODE_BLS_KEY_FILE: /keys/bls/keys/1.bls.key.json
      NODE_BLS_KEY_PASSWORD: "{{.keys.node3_bls.password}}"
      NODE_REGISTER_AT_NODE_START: true
      NODE_PUBLIC_IP_CHECK_INTERVAL: 0

  - name: localstack
    image: localstack/localstack
    env:
      DEBUG: 1
    ports:
      gateway:
        number: 4566
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    cmd: []

  - name: create-s3-bucket
    image: amazon/aws-cli:2.13.2
    env:
      AWS_ACCESS_KEY_ID: "localstack"
      AWS_SECRET_ACCESS_KEY: "localstack"
    cmd:
      - "s3api"
      - "create-bucket"
      - "--endpoint-url=http://{{.services.localstack.ip_address}}:4566/"
      - "--bucket"
      - "test-eigenda-blobstore"
      - "--region"
      - "us-east-1"

  - name: create-dynamo-metadata-table
    image: amazon/aws-cli:2.13.2
    env:
      AWS_ACCESS_KEY_ID: "localstack"
      AWS_SECRET_ACCESS_KEY: "localstack"
    cmd:
      - "dynamodb"
      - "create-table"
      - "--table-name"
      - "test-BlobMetadata"
      - "--attribute-definitions"
      - "AttributeName=BlobHash,AttributeType=S"
      - "AttributeName=MetadataHash,AttributeType=S"
      - "AttributeName=BlobStatus,AttributeType=N"
      - "AttributeName=RequestedAt,AttributeType=N"
      - "AttributeName=BatchHeaderHash,AttributeType=B"
      - "AttributeName=BlobIndex,AttributeType=N"
      - "AttributeName=Expiry,AttributeType=N"
      - "--key-schema"
      - "AttributeName=BlobHash,KeyType=HASH"
      - "AttributeName=MetadataHash,KeyType=RANGE"
      - "--provisioned-throughput"
      - "ReadCapacityUnits=10,WriteCapacityUnits=10"
      - "--global-secondary-indexes"
      - '[{"IndexName": "StatusIndex", "KeySchema": [{"AttributeName": "BlobStatus", "KeyType": "HASH"},{"AttributeName": "RequestedAt", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 5, "WriteCapacityUnits": 5}},{"IndexName": "BatchIndex","KeySchema": [{"AttributeName": "BatchHeaderHash", "KeyType": "HASH"},{"AttributeName": "BlobIndex", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 5, "WriteCapacityUnits": 5}},{"IndexName": "Status-Expiry-Index","KeySchema": [{"AttributeName": "BlobStatus", "KeyType": "HASH"},{"AttributeName": "Expiry", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 5, "WriteCapacityUnits": 5}}]'
      - "--endpoint-url"
      - "http://{{.services.localstack.ip_address}}:4566/"
      - "--region"
      - "us-east-1"

  - name: create-dynamo-store-table
    image: amazon/aws-cli:2.13.2
    env:
      AWS_ACCESS_KEY_ID: "localstack"
      AWS_SECRET_ACCESS_KEY: "localstack"
    cmd:
      - "dynamodb"
      - "create-table"
      - "--table-name"
      - "test-BucketStore"
      - "--attribute-definitions"
      - "AttributeName=RequesterID,AttributeType=S"
      - "--key-schema"
      - "AttributeName=RequesterID,KeyType=HASH"
      - "--provisioned-throughput"
      - "ReadCapacityUnits=10,WriteCapacityUnits=10"
      - "--endpoint-url"
      - "http://{{.services.localstack.ip_address}}:4566/"
      - "--region"
      - "us-east-1"

  - name: churner
    image: eigenda-churner
    build_cmd: "docker build . -t eigenda-churner --target churner"
    ports:
      grpc:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    env:
      CHURNER_LOG_LEVEL: debug
      CHURNER_VERBOSE: true
      CHURNER_HOSTNAME: "churner"
      CHURNER_GRPC_PORT: "8080"
      CHURNER_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      CHURNER_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      CHURNER_CHAIN_RPC: "{{.http_rpc_url}}"
      # This removes the leading 0x from the key
      CHURNER_PRIVATE_KEY: "{{slice .keys.churner_key.private_key 2}}"
      CHURNER_GRAPH_URL: ""
      CHURNER_INDEXER_PULL_INTERVAL: "1s"
      CHURNER_ENABLE_METRICS: "true"
      CHURNER_METRICS_HTTP_PORT: "9100"
      CHURNER_CHURN_APPROVAL_INTERVAL: "900s"

  - name: disperser
    image: eigenda-apiserver
    build_cmd: "docker build . -t eigenda-apiserver --target apiserver"
    ports:
      grpc:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    env:
      DISPERSER_SERVER_LOG_LEVEL: debug
      DISPERSER_SERVER_VERBOSE: true
      DISPERSER_SERVER_S3_BUCKET_NAME: "test-eigenda-blobstore"
      DISPERSER_SERVER_DYNAMODB_TABLE_NAME: "test-BlobMetadata"
      DISPERSER_SERVER_RATE_BUCKET_TABLE_NAME: ""
      DISPERSER_SERVER_RATE_BUCKET_STORE_SIZE: "100000"
      DISPERSER_SERVER_GRPC_PORT: "8080"
      DISPERSER_SERVER_ENABLE_METRICS: "true"
      DISPERSER_SERVER_METRICS_HTTP_PORT: "9100"
      DISPERSER_SERVER_CHAIN_RPC: "{{.http_rpc_url}}"
      # This removes the leading 0x from the key
      DISPERSER_SERVER_PRIVATE_KEY: "{{slice .keys.disperser_key.private_key 2}}"
      DISPERSER_SERVER_NUM_CONFIRMATIONS: "0"
      DISPERSER_SERVER_REGISTERED_QUORUM_ID: "0,1"
      DISPERSER_SERVER_TOTAL_UNAUTH_BYTE_RATE: "10000000,10000000"
      DISPERSER_SERVER_PER_USER_UNAUTH_BYTE_RATE: "32000,32000"
      DISPERSER_SERVER_TOTAL_UNAUTH_BLOB_RATE: "10,10"
      DISPERSER_SERVER_PER_USER_UNAUTH_BLOB_RATE: "2,2"
      DISPERSER_SERVER_ENABLE_RATELIMITER: "false"
      DISPERSER_SERVER_RETRIEVAL_BLOB_RATE: "4"
      DISPERSER_SERVER_RETRIEVAL_BYTE_RATE: "10000000"
      DISPERSER_SERVER_MAX_BLOB_SIZE: 2097152
      DISPERSER_SERVER_BUCKET_SIZES: "5s"
      DISPERSER_SERVER_BUCKET_MULTIPLIERS: "1"
      DISPERSER_SERVER_COUNT_FAILED: "true"
      DISPERSER_SERVER_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      DISPERSER_SERVER_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      DISPERSER_SERVER_AWS_ENDPOINT_URL: "http://{{.services.localstack.ip_address}}:4566"
      DISPERSER_SERVER_AWS_REGION: "us-east-1"
      DISPERSER_SERVER_AWS_ACCESS_KEY_ID: localstack
      DISPERSER_SERVER_AWS_SECRET_ACCESS_KEY: localstack

  - name: encoder
    image: eigenda-encoder
    build_cmd: "docker build . -t eigenda-encoder --target encoder"
    ports:
      grpc:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    input:
      /kzg/: kzg_config
    env:
      DISPERSER_ENCODER_LOG_LEVEL: debug
      DISPERSER_ENCODER_VERBOSE: true
      DISPERSER_ENCODER_GRPC_PORT: "8080"
      DISPERSER_ENCODER_ENABLE_METRICS: "true"
      DISPERSER_ENCODER_METRICS_HTTP_PORT: "9100"
      DISPERSER_ENCODER_AWS_REGION: "us-east-1"
      DISPERSER_ENCODER_G1_PATH: /kzg/g1.point
      DISPERSER_ENCODER_G2_PATH: /kzg/g2.point
      DISPERSER_ENCODER_CACHE_PATH: /kzg/cache
      DISPERSER_ENCODER_SRS_ORDER: 65536
      DISPERSER_ENCODER_SRS_LOAD: 65536
      DISPERSER_ENCODER_PREVENT_REENCODING: true

  - name: retriever
    image: eigenda-retriever
    build_cmd: "docker build . -t eigenda-retriever --target retriever"
    ports:
      grpc:
        number: 8080
        transport_protocol: TCP
        application_protocol: "grpc"
        wait: 1m
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    input:
      /kzg/: kzg_config
    env:
      RETRIEVER_LOG_LEVEL: debug
      RETRIEVER_VERBOSE: true
      RETRIEVER_HOSTNAME: "retriever"
      RETRIEVER_GRPC_PORT: "8080"
      RETRIEVER_TIMEOUT: "20s"
      RETRIEVER_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      RETRIEVER_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      RETRIEVER_G1_PATH: /kzg/g1.point
      RETRIEVER_G2_PATH: /kzg/g2.point
      RETRIEVER_CACHE_PATH: /kzg/cache
      RETRIEVER_SRS_ORDER: 65536
      RETRIEVER_SRS_LOAD: 65536
      RETRIEVER_CHAIN_RPC: "{{.http_rpc_url}}"
      RETRIEVER_PRIVATE_KEY: "{{slice .keys.disperser_key.private_key 2}}"
      RETRIEVER_ENABLE_METRICS: true
      RETRIEVER_METRICS_HTTP_PORT: 9100
      RETRIEVER_GRAPH_URL: ""

  - name: batcher
    image: eigenda-batcher
    build_cmd: "docker build . -t eigenda-batcher --target batcher"
    ports:
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
        wait: 1m
    env:
      BATCHER_LOG_LEVEL: debug
      BATCHER_VERBOSE: true
      BATCHER_S3_BUCKET_NAME: "test-eigenda-blobstore"
      BATCHER_DYNAMODB_TABLE_NAME: "test-BlobMetadata"
      BATCHER_BLS_OPERATOR_STATE_RETRIVER: "{{.addresses.EigenDA.operatorStateRetriever}}"
      BATCHER_EIGENDA_SERVICE_MANAGER: "{{.addresses.EigenDA.serviceManager}}"
      BATCHER_ENCODER_ADDRESS: "{{.services.encoder.ip_address}}:8080"
      BATCHER_ENABLE_METRICS: true
      BATCHER_METRICS_HTTP_PORT: 9100
      # The following config has been tested against 10xMBps
      BATCHER_BATCH_SIZE_LIMIT: 65536
      BATCHER_NUM_CONNECTIONS: "512"
      BATCHER_PULL_INTERVAL: 120s
      # setting this too low may result in encoding jobs never finishing
      BATCHER_ENCODING_TIMEOUT: 64s
      BATCHER_ATTESTATION_TIMEOUT: 100s
      BATCHER_ENCODING_REQUEST_QUEUE_SIZE: 1000

      BATCHER_USE_GRAPH: false
      BATCHER_GRAPH_URL: ""
      BATCHER_SRS_ORDER: 65536
      BATCHER_CHAIN_RPC: "{{.http_rpc_url}}"
      # This removes the leading "0x" from the private key
      BATCHER_PRIVATE_KEY: "{{slice .keys.disperser_key.private_key 2}}"
      BATCHER_AWS_REGION: "us-east-1"
      BATCHER_KMS_KEY_DISABLE: true
      BATCHER_KMS_KEY_ID: ""
      BATCHER_KMS_KEY_REGION: ""
      BATCHER_AWS_ACCESS_KEY_ID: "localstack"
      BATCHER_AWS_SECRET_ACCESS_KEY: "localstack"
      BATCHER_AWS_ENDPOINT_URL: "http://{{.services.localstack.ip_address}}:4566"
      BATCHER_FINALIZATION_BLOCK_DELAY: 1

  - name: traffic-generator
    image: traffic-generator
    build_context: "."
    build_file: trafficgenerator.Dockerfile
    env:
      # This sets the hostname and port of the disperser
      TRAFFIC_GENERATOR_HOSTNAME: "{{.services.disperser.ip_address}}"
      TRAFFIC_GENERATOR_GRPC_PORT: "8080"

      TRAFFIC_GENERATOR_NUM_INSTANCES: "1"
      TRAFFIC_GENERATOR_REQUEST_INTERVAL: 5s
      TRAFFIC_GENERATOR_DATA_SIZE: "1024"

  - name: proxy
    image: ghcr.io/layr-labs/eigenda-proxy
    ports:
      rpc:
        number: 4242
        transport_protocol: TCP
        application_protocol: "http"
      metrics:
        number: 9100
        transport_protocol: TCP
        application_protocol: "http"
    input:
      /app/resources: kzg_config
    env:
      EIGENDA_PROXY_ADDR: "0.0.0.0"
      EIGENDA_PROXY_PORT: 4242
      EIGENDA_PROXY_MEMSTORE_ENABLED: false
      EIGENDA_PROXY_MEMSTORE_EXPIRATION: 45m
      EIGENDA_PROXY_EIGENDA_SIGNER_PRIVATE_KEY_HEX: "{{slice .keys.proxy_signer.private_key 2}}"
      EIGENDA_PROXY_EIGENDA_DISPERSER_RPC: "{{.services.disperser.ip_address}}:8080"
      EIGENDA_PROXY_EIGENDA_SERVICE_MANAGER_ADDR: "{{.addresses.EigenDA.serviceManager}}"
      EIGENDA_PROXY_EIGENDA_ETH_RPC: "{{.http_rpc_url}}"
      EIGENDA_PROXY_EIGENDA_ETH_CONFIRMATION_DEPTH: 0
      EIGENDA_PROXY_METRICS_ADDR: "0.0.0.0"
      EIGENDA_PROXY_METRICS_ENABLED: true
      EIGENDA_PROXY_METRICS_PORT: 9100
      EIGENDA_PROXY_EIGENDA_GRPC_DISABLE_TLS: true
      EIGENDA_PROXY_EIGENDA_MAX_BLOB_LENGTH: 2097152 # 65536 points * 32 bytes per point

  - name: prometheus
    image: prom/prometheus
    ports:
      http:
        number: 9090
        transport_protocol: TCP
        application_protocol: "http"
    input:
      /etc/prometheus: prometheus_config
    cmd: ["--config.file=/etc/prometheus/prometheus.yml"]

  - name: grafana
    image: grafana/grafana
    ports:
      http:
        number: 3000
        transport_protocol: TCP
        application_protocol: "http"
    input:
      /etc/grafana/provisioning/datasources: grafana_config
    env:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin

# Specify keys to generate
keys:
  - name: churner_key
    type: ecdsa
  - name: staker1_key
    type: ecdsa
  - name: node1_ecdsa
    type: ecdsa
  - name: node1_bls
    type: bls
  - name: node2_ecdsa
    type: ecdsa
  - name: node2_bls
    type: bls
  - name: node3_ecdsa
    type: ecdsa
  - name: node3_bls
    type: bls
  - name: disperser_key
    type: ecdsa
  - name: proxy_signer
    type: ecdsa

artifacts:
  eigenda_deploy_config:
    files:
      eigenda_deploy_config.json:
        template: |
          {
            "numStrategies": 2,
            "confirmerPrivateKey": "{{.keys.disperser_key.private_key}}",
            "stakerPrivateKeys": ["{{.keys.staker1_key.private_key}}"],
            "stakerTokenAmounts": [["0xe8d4a51000"], ["0xe8d4a51000"]],
            "operatorPrivateKeys": ["{{.keys.node1_ecdsa.private_key}}", "{{.keys.node2_ecdsa.private_key}}", "{{.keys.node3_ecdsa.private_key}}"],
            "useDefaults": false,
            "eigenLayerCommunityMultisig": "{{.deployer_address}}",
            "eigenLayerOperationsMultisig": "{{.deployer_address}}",
            "eigenLayerPauserMultisig": "{{.deployer_address}}",
            "eigenDACommunityMultisig": "{{.deployer_address}}",
            "eigenDAPauser": "{{.deployer_address}}",
            "churner": "{{.keys.churner_key.address}}",
            "ejector": "{{.deployer_address}}",
            "initialSupply": "0x3635c9adc5dea00000",
            "tokenOwner": "{{.deployer_address}}",
            "maxOperatorCount": 3
          }

  kzg_config:
    files:
      g1.point:
        static_file: "resources/g1.point"
      g2.point:
        static_file: "resources/g2.point"
      g2.point.powerOf2:
        static_file: "resources/g2.point.powerOf2"

  prometheus_config:
    files:
      prometheus.yml:
        template: |
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          scrape_configs:
            - job_name: "node1"
              static_configs:
                - targets: ["{{.services.node1.ip_address}}:9100"]
            - job_name: "node2"
              static_configs:
                - targets: ["{{.services.node2.ip_address}}:9100"]
            - job_name: "node3"
              static_configs:
                - targets: ["{{.services.node3.ip_address}}:9100"]
            - job_name: "churner"
              static_configs:
                - targets: ["{{.services.churner.ip_address}}:9100"]
            - job_name: "disperser"
              static_configs:
                - targets: ["{{.services.disperser.ip_address}}:9100"]
            - job_name: "encoder"
              static_configs:
                - targets: ["{{.services.encoder.ip_address}}:9100"]
            - job_name: "retriever"
              static_configs:
                - targets: ["{{.services.retriever.ip_address}}:9100"]
            - job_name: "batcher"
              static_configs:
                - targets: ["{{.services.batcher.ip_address}}:9100"]
            - job_name: "proxy"
              static_configs:
                - targets: ["{{.services.proxy.ip_address}}:9100"]

  grafana_config:
    files:
      datasource.yml:
        template: |
          apiVersion: 1

          datasources:
          - name: Prometheus
            type: prometheus
            url: http://{{.services.prometheus.ip_address}}:9090 
            isDefault: true
            access: proxy
            editable: true

# ethereum-package configuration
ethereum_package:
  additional_services:
    - blockscout
  network_params:
    # NOTE: turning this to 1s causes "referenceBlockNumber is in future" errors
    seconds_per_slot: 3
