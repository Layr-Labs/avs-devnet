# Example devnet config file for Aligned Layer (https://github.com/yetanotherco/aligned_layer)
deployments:
  # TODO: use devnet EigenLayer deployer
  - name: EigenLayer
    repo: "https://github.com/yetanotherco/aligned_layer.git"
    ref: "staging"
    contracts_path: "contracts"
    script: script/deploy/EigenLayerDeployer.s.sol
    extra_args: --sig 'run(string memory configFileName)' -- eigen.devnet.config.json
    input:
      script/deploy/config/devnet/: eigenlayer_deployment_config
    output:
      eigenlayer_addresses: "script/output/devnet/eigenlayer_deployment_output.json"

  - name: Aligned
    repo: "https://github.com/yetanotherco/aligned_layer.git"
    ref: "staging"
    contracts_path: "contracts"
    script: script/deploy/AlignedLayerDeployer.s.sol
    extra_args: >-
      --sig "run(string memory existingDeploymentInfoPath, string memory deployConfigPath, string memory outputPath)"
      ./script/output/devnet/eigenlayer_deployment_output.json
      ./script/deploy/config/devnet/aligned.devnet.config.json
      ./script/output/devnet/alignedlayer_deployment_output.json
    input:
      script/deploy/config/devnet/: aligned_deployment_config
      script/output/devnet/: eigenlayer_addresses
    output:
      avs_addresses: script/output/devnet/alignedlayer_deployment_output.json

  - name: Batcher Payment Service
    repo: "https://github.com/yetanotherco/aligned_layer.git"
    ref: "docker-compose-test-concurrency"
    contracts_path: "contracts"
    script: script/deploy/BatcherPaymentServiceDeployer.s.sol
    extra_args: >-
      --sig "run(string batcherConfigPath)"
      ./script/deploy/config/devnet/batcher.devnet.config.json
    input:
      script/deploy/config/devnet/: batcher_config

services:
  - name: "aggregator"
    image: "ghcr.io/yetanotherco/aligned_layer/aggregator:latest"
    ports:
      rpc:
        number: 8090
        transport_protocol: "TCP"
        application_protocol: "http"
      metrics:
        number: 9091
        transport_protocol: "TCP"
        application_protocol: "http"
    input:
      /aggregator/config-files/: aggregator_config
      /aggregator/contracts/script/output/devnet/:
        - eigenlayer_addresses
        - avs_addresses
      /aggregator/keystores/:
        - aggregator_bls_keystore
        - aggregator_ecdsa_keystore
    cmd:
      - "aligned-layer-aggregator"
      - "--config"
      - "./config-files/config-aggregator.yaml"

  # One-shot services to perform tasks
  - name: "operator1-register-operator-eigenlayer"
    image: ghcr.io/yetanotherco/aligned_layer/eigenlayer-cli:latest
    input:
      /go/config-files/: operator_config
      /go/keystores/: operator1_ecdsa_keystore
    env:
      PASSWORD: "$keystores.operator1_ecdsa_keystore.password"
    cmd:
      - "sh"
      - "-c"
      - 'echo "$PASSWORD" | eigenlayer operator register ./config-files/config-docker.yaml'

  - name: "operator1-mint-mock-tokens"
    image: ghcr.io/yetanotherco/aligned_layer/foundry:latest
    input:
      /config-files/: operator_config
      /addresses/: eigenlayer_addresses
      /keystores/: operator1_ecdsa_keystore
    env:
      DEPLOYER_PRIVATE_KEY: "$deployer_private_key"
      RPC_URL: "$http_rpc_url"
      OPERATOR_ADDRESS: "$keystores.operator1_ecdsa_keystore.address"
    cmd:
      - "sh"
      - "-c"
      - >-
        STRATEGY_ADDR=$(awk '/"MOCK": "(.*)"/{ print $2 }' addresses/eigenlayer_deployment_output.json | tr -d '"\n,') &&
        sleep 12 &&
        TOKEN_ADDR=$(cast call --rpc-url $RPC_URL $STRATEGY_ADDR 'underlyingToken()(address)') &&
        cast send $TOKEN_ADDR 'mint(address, uint256)' $OPERATOR_ADDRESS 100000000000000000
        --private-key $DEPLOYER_PRIVATE_KEY --rpc-url $RPC_URL

  - name: "operator1-deposit-into-mock-strategy"
    image: ghcr.io/yetanotherco/aligned_layer/operator:latest
    input:
      /aligned_layer/config-files/: operator_config
      /aligned_layer/contracts/script/output/devnet/:
        - eigenlayer_addresses
        - avs_addresses
      /aligned_layer/keystores/:
        - operator1_bls_keystore
        - operator1_ecdsa_keystore
    env:
      OPERATOR_ADDRESS: "$keystores.operator1_ecdsa_keystore.address"
    cmd:
      - "sh"
      - "-c"
      - >-
        EL_ADDRESSES_FILE=contracts/script/output/devnet/eigenlayer_deployment_output.json &&
        STRATEGY_ADDR=$(awk '/"MOCK": "(.*)"/{ print $2 }' $EL_ADDRESSES_FILE | tr -d '"\n,') &&
        sleep 24 &&
        aligned-layer-operator deposit-into-strategy --config ./config-files/config-docker.yaml
        --strategy-address $STRATEGY_ADDR --amount 100000000000000000

  - name: "operator1-whitelist-devnet"
    image: ghcr.io/yetanotherco/aligned_layer/foundry:latest
    input:
      /config-files/: operator_config
      /addresses/: avs_addresses
      /keystores/: operator1_ecdsa_keystore
    env:
      DEPLOYER_PRIVATE_KEY: "$deployer_private_key"
      RPC_URL: "$http_rpc_url"
      OPERATOR_ADDRESS: "$keystores.operator1_ecdsa_keystore.address"
    cmd:
      - "sh"
      - "-c"
      - >-
        REGISTRY_ADDR=$(awk '/"registryCoordinator": "(.*)"/{ print $2 }' addresses/alignedlayer_deployment_output.json | tr -d '"\n,') &&
        echo "Registry address: $REGISTRY_ADDR" &&
        sleep 36 &&
        cast send  $REGISTRY_ADDR 'add(address)' $OPERATOR_ADDRESS --rpc-url $RPC_URL --private-key $DEPLOYER_PRIVATE_KEY

  - name: operator-register-with-aligned-layer
    image: ghcr.io/yetanotherco/aligned_layer/operator:latest
    input:
      /aligned_layer/config-files/: operator_config
      /aligned_layer/contracts/script/output/devnet/:
        - eigenlayer_addresses
        - avs_addresses
      /aligned_layer/keystores/:
        - operator1_bls_keystore
        - operator1_ecdsa_keystore
    cmd:
      - "sh"
      - "-c"
      - "sleep 48 && aligned-layer-operator register --config ./config-files/config-docker.yaml"

  - name: "operator1"
    image: "ghcr.io/yetanotherco/aligned_layer/operator:latest"
    input:
      /aligned_layer/config-files/: operator_config
      /aligned_layer/contracts/script/output/devnet/:
        - eigenlayer_addresses
        - avs_addresses
      /aligned_layer/keystores/:
        - operator1_bls_keystore
        - operator1_ecdsa_keystore
    cmd:
      - "sh"
      - "-c"
      - "sleep 60 && aligned-layer-operator start --config ./config-files/config-docker.yaml"

keystores:
  - name: "aggregator_bls_keystore"
    type: "bls"
  - name: "aggregator_ecdsa_keystore"
    type: "ecdsa"
  - name: "operator1_bls_keystore"
    type: "bls"
  - name: "operator1_ecdsa_keystore"
    type: "ecdsa"

artifacts:
  eigenlayer_deployment_config:
    files:
      eigen.devnet.config.json: |
        {
          "chainInfo": {
            "chainId": 31337
          },
          "multisig_addresses": {
            "pauserMultisig": "{{.deployer_address}}",
            "communityMultisig": "{{.deployer_address}}",
            "operationsMultisig": "{{.deployer_address}}",
            "executorMultisig": "{{.deployer_address}}",
            "timelock": "{{.deployer_address}}"
          },
          "strategies": {
            "numStrategies": 0,
            "MAX_PER_DEPOSIT": 115792089237316195423570985008687907853269984665640564039457584007913129639935,
            "MAX_TOTAL_DEPOSITS": 115792089237316195423570985008687907853269984665640564039457584007913129639935,
            "strategiesToDeploy": []
          },
          "strategyManager": {
            "init_strategy_whitelister": "{{.deployer_address}}",
            "init_paused_status": 0
          },
          "delegationManager": {
            "init_paused_status": 0,
            "init_minWithdrawalDelayBlocks": 10
          },
          "rewardsCoordinator": {
            "init_paused_status": 0,
            "CALCULATION_INTERVAL_SECONDS": 604800,
            "MAX_REWARDS_DURATION": 6048000,
            "MAX_RETROACTIVE_LENGTH": 7776000,
            "MAX_FUTURE_LENGTH": 2592000,
            "GENESIS_REWARDS_TIMESTAMP": 1710979200,
            "rewards_updater_address": "{{.deployer_address}}",
            "activation_delay": 7200,
            "calculation_interval_seconds": 604800,
            "global_operator_commission_bips": 1000
          },
          "avsDirectory": {
            "init_paused_status": 0
          },
          "slasher": {
            "init_paused_status": 0
          },
          "eigenPod": {
            "MAX_RESTAKED_BALANCE_GWEI_PER_VALIDATOR": 32000000000,
            "GENESIS_TIME": 1695902400
          },
          "eigenPodManager": {
            "init_paused_status": 0,
            "deneb_fork_timestamp": "1707305664"
          },
          "delayedWithdrawalRouter": {
            "init_paused_status": 0,
            "init_withdrawalDelayBlocks": 10
          },
          "ethPOSDepositAddress": "0x4242424242424242424242424242424242424242",
          "beaconOracleAddress": "0x4C116BB629bff7A8373c2378bBd919f8349B8f25"
        }
  aligned_deployment_config:
    additional_data:
      aggregator_ecdsa_keystore:
        AggregatorAddress: ".address"
      eigenlayer_addresses:
        mock_strategy_address: ".addresses.strategies.MOCK"
    files:
      aligned.devnet.config.json: |
        {
          "chainInfo": {
            "chainId": 31337
          },
          "permissions": {
            "owner": "{{.deployer_address}}",
            "aggregator": "{{.AggregatorAddress}}",
            "upgrader": "{{.deployer_address}}",
            "churner": "{{.deployer_address}}",
            "ejector": "{{.deployer_address}}",
            "deployer": "{{.deployer_address}}",
            "initalPausedStatus": 0
          },
          "minimumStakes": [
            1
          ],
          "strategyWeights": [
            [
              {
                "0_strategy": "{{.mock_strategy_address}}",
                "1_multiplier": 1e+18
              }
            ]
          ],
          "operatorSetParams": [
            {
              "0_maxOperatorCount": 200,
              "1_kickBIPsOfOperatorStake": 11000,
              "2_kickBIPsOfTotalStake": 50
            }
          ],
          "uri": ""
        }

  batcher_config:
    additional_data:
      avs_addresses:
        service_manager_address: ".addresses.alignedLayerServiceManager"
    files:
      batcher.devnet.config.json: |
        {
          "address": {
            "batcherWallet": "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc",
            "batcherPrivateKey": "0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba",
            "alignedLayerServiceManager": "{{.service_manager_address}}"
          },
          "amounts": {
            "gasForAggregator": "300000",
            "gasPerProof": "21000"
          },
          "permissions": {
            "owner": "{{.deployer_address}}"
          }
        }

  aggregator_config:
    additional_data:
      avs_addresses:
        AlignedLayerServiceManager: ".addresses.alignedLayerServiceManager"
    files:
      config-aggregator.yaml: |
        # Common variables for all the services
        # 'production' only prints info and above. 'development' also prints debug
        environment: "production"
        aligned_layer_deployment_config_file_path: "./contracts/script/output/devnet/alignedlayer_deployment_output.json"
        eigen_layer_deployment_config_file_path: "./contracts/script/output/devnet/eigenlayer_deployment_output.json"
        eth_rpc_url: "{{.http_rpc_url}}"
        eth_rpc_url_fallback: "{{.http_rpc_url}}"
        eth_ws_url: "{{.ws_rpc_url}}"
        eth_ws_url_fallback: "{{.ws_rpc_url}}"
        eigen_metrics_ip_port_address: "localhost:9090"

        ## ECDSA Configurations
        ecdsa:
          private_key_store_path: "keystores/1.ecdsa.key.json"
          private_key_store_password: "{{.keystores.aggregator_ecdsa_keystore.password}}"

        ## BLS Configurations
        bls:
          private_key_store_path: "keystores/1.bls.key.json"
          private_key_store_password: "{{.keystores.aggregator_bls_keystore.password}}"

        ## Aggregator Configurations
        aggregator:
          server_ip_port_address: 0.0.0.0:8090
          bls_public_key_compendium_address: 0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44
          avs_service_manager_address: {{.AlignedLayerServiceManager}}
          enable_metrics: true
          metrics_ip_port_address: 0.0.0.0:9091
          telemetry_ip_port_address: localhost:4001
          garbage_collector_period: 2m #The period of the GC process. Suggested value for Prod: '168h' (7 days)
          garbage_collector_tasks_age: 20 #The age of tasks that will be removed by the GC, in blocks. Suggested value for prod: '216000' (30 days)
          garbage_collector_tasks_interval: 10 #The interval of queried blocks to get an old batch. Suggested value for prod: '900' (3 hours)

  operator_config:
    additional_data:
      eigenlayer_addresses:
        el_delegation_manager_address: ".addresses.delegationManager"
      avs_addresses:
        AlignedLayerServiceManager: ".addresses.alignedLayerServiceManager"
    files:
      config-docker.yaml: |
        # Common variables for all the services
        # 'production' only prints info and above. 'development' also prints debug
        environment: "production"
        aligned_layer_deployment_config_file_path: "./contracts/script/output/devnet/alignedlayer_deployment_output.json"
        eigen_layer_deployment_config_file_path: "./contracts/script/output/devnet/eigenlayer_deployment_output.json"
        eth_rpc_url: "{{.http_rpc_url}}"
        eth_rpc_url_fallback: "{{.http_rpc_url}}"
        eth_ws_url: "{{.ws_rpc_url}}"
        eth_ws_url_fallback: "{{.ws_rpc_url}}"
        eigen_metrics_ip_port_address: "localhost:9090"

        ## ECDSA Configurations
        ecdsa:
          private_key_store_path: "keystores/1.ecdsa.key.json"
          private_key_store_password: "{{.keystores.operator1_ecdsa_keystore.password}}"

        ## BLS Configurations
        bls:
          private_key_store_path: "keystores/1.bls.key.json"
          private_key_store_password: "{{.keystores.operator1_bls_keystore.password}}"

        ## Operator Configurations
        operator:
          aggregator_rpc_server_ip_port_address: {{.services.aggregator.ip_address}}:8090
          operator_tracker_ip_port_address: http://localhost:3030
          address: {{.keystores.operator1_ecdsa_keystore.address}}
          earnings_receiver_address: {{.keystores.operator1_ecdsa_keystore.address}}
          delegation_approver_address: "0x0000000000000000000000000000000000000000"
          staker_opt_out_window_blocks: 0
          metadata_url: "https://yetanotherco.github.io/operator_metadata/metadata.json"
          enable_metrics: true
          metrics_ip_port_address: localhost:9092
          max_batch_size: 268435456 # 256 MiB
          last_processed_batch_filepath: config-files/operator.last_processed_batch.json

        # Operators variables needed for register it in EigenLayer
        el_delegation_manager_address: "{{.el_delegation_manager_address}}"
        private_key_store_path: keystores/1.ecdsa.key.json
        bls_private_key_store_path: keystores/1.bls.key.json
        signer_type: local_keystore
        chain_id: 31337

ethereum_package:
  participants:
    - el_type: reth
      cl_type: teku
  additional_services:
    - blockscout
    - dora
  network_params:
    # We use anvil's chain ID because 3151908 is not supported by eigenlayer-cli
    network_id: "31337"
