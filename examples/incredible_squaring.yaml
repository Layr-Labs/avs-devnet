# Example devnet config file for the incredible-squaring-avs example
deployments:
  - type: EigenLayer
    # This commit corresponds to the incredible-squaring commit below
    ref: "v0.3.3-mainnet-rewards"
    # NOTE: operator registration is done at operator startup

  - name: incredible_squaring
    repo: "https://github.com/Layr-Labs/incredible-squaring-avs.git"
    ref: "1d8d5915d01169bd18f3f242ecc17f5884fca824"
    contracts_path: "contracts"
    script: script/IncredibleSquaringDeployer.s.sol
    input:
      script/output/3151908: eigenlayer_addresses
    output:
      avs_addresses: "script/output/3151908/credible_squaring_avs_deployment_output.json"
    # Specify addresses to fetch from avs_addresses artifact
    addresses:
      serviceManager: avs_addresses:.addresses.credibleSquaringServiceManager
      taskManager: avs_addresses:.addresses.credibleSquaringTaskManager
      erc20MockStrategy: avs_addresses:.addresses.erc20MockStrategy
      operatorStateRetriever: avs_addresses:.addresses.operatorStateRetriever
      registryCoordinator: avs_addresses:.addresses.registryCoordinator

services:
  - name: aggregator
    image: "ghcr.io/layr-labs/incredible-squaring/aggregator/cmd/main.go:latest"
    ports:
      rpc:
        number: 8090
        transport_protocol: "TCP"
        application_protocol: "http"
    input:
      /usr/src/app/config-files/:
        - aggregator-config
        - avs_addresses
    cmd:
      - "--config"
      - "/usr/src/app/config-files/aggregator-config.yaml"
      - "--ecdsa-private-key"
      - "{{.keys.aggregator_key.private_key}}"
      - "--credible-squaring-deployment"
      - "/usr/src/app/config-files/credible_squaring_avs_deployment_output.json"

  - name: operator
    image: "ghcr.io/layr-labs/incredible-squaring/operator/cmd/main.go:latest"
    ports:
      node:
        number: 8080
        transport_protocol: "TCP"
        application_protocol: "http"
        wait: "3m"
    input:
      /usr/src/app/config-files/:
        - operator-config
        - operator_bls_keys
        - operator_ecdsa_keys
    env:
      OPERATOR_ECDSA_KEY_PASSWORD: "{{.keys.operator_ecdsa_keys.password}}"
      OPERATOR_BLS_KEY_PASSWORD: "{{.keys.operator_bls_keys.password}}"
    cmd: ["--config", "/usr/src/app/config-files/operator-config.yaml"]

keys:
  # This generates new keypairs for the operator
  - name: operator_bls_keys
    type: bls
  - name: operator_ecdsa_keys
    type: ecdsa
  # This ensures the aggregator has funds
  # NOTE: aggregator key-pair is hardcoded in the deployment scripts
  # TODO: specify private key only
  - name: aggregator_key
    address: "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720"
    private_key: "0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6"

artifacts:
  aggregator-config:
    files:
      aggregator-config.yaml: |
        # 'production' only prints info and above. 'development' also prints debug
        environment: production
        eth_rpc_url: {{.http_rpc_url}}
        eth_ws_url: {{.ws_rpc_url}}
        # address which the aggregator listens on for operator signed messages
        aggregator_server_ip_port_address: 0.0.0.0:8090

  operator-config:
    files:
      operator-config.yaml: |
        production: False
        operator_address: {{.keys.operator_ecdsa_keys.address}}
        avs_registry_coordinator_address: {{.addresses.incredible_squaring.registryCoordinator}}
        operator_state_retriever_address: {{.addresses.incredible_squaring.operatorStateRetriever}}
        eth_rpc_url: {{.http_rpc_url}}
        eth_ws_url: {{.ws_rpc_url}}
        ecdsa_private_key_store_path: /usr/src/app/config-files/keys/1.ecdsa.key.json
        bls_private_key_store_path: /usr/src/app/config-files/keys/1.bls.key.json
        aggregator_server_ip_port_address: {{.services.aggregator.ip_address}}:8090
        eigen_metrics_ip_port_address: "0.0.0.0:8081"
        enable_metrics: False
        node_api_ip_port_address: "0.0.0.0:8080"
        enable_node_api: True
        register_operator_on_startup: True
        token_strategy_addr: {{.addresses.incredible_squaring.erc20MockStrategy}}

ethereum_package:
  additional_services:
    - blockscout
